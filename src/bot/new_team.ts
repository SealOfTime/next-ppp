import slug from 'limax';
import Prisma from "../Prisma";
import { makeid } from "../Util";
import Bot, { BotRequest } from "./bot";
import { BasicKeyboard, ConfirmationKeyboard, NewTeamDateKeyboard, UserWithTeamInitialKeyboard } from "./keyboard/keyboard";

const UnicodeCharacterRegex = /[\p{Alphabetic}\p{Mark}\p{Decimal_Number}\p{Connector_Punctuation}\p{Join_Control}]|\p{Emoji_Modifier_Base}\p{Emoji_Modifier}?|\p{Emoji_Presentation}|\p{Emoji}\uFE0F|[ `!@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?~]/gu;
const PhoneRegex = /^((8|\+7)[\- ]?)?(\(?\d{3}\)?[\- ]?)?[\d\- ]{7,10}$/;
export const TeamCodeLength = 8;

export async function handleNewTeamName(req: BotRequest) {
  if (req.message === '–ö –Ω–∞—á–∞–ª—É') {
    await Bot.forward('INITIAL', req);
    return;
  }

  if (UnicodeCharacterRegex.exec(req.message).length > 40) {
    await Bot.sendMessage(req.user, BasicKeyboard, '–í –Ω–∞–∑–≤–∞–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –±–æ–ª–µ–µ 40 —Å–∏–º–≤–æ–ª–æ–≤')
    return;
  }

  const teamWithSameSlug = await Prisma.team.findFirst({
    where: {
      id: slug(req.message),
    },
  })
  if(teamWithSameSlug !== null) {
    const response = `–ö–æ–º–∞–Ω–¥–∞ —Å –ø–æ—Ö–æ–∂–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –¥—Ä—É–≥–æ–µ –∏–ª–∏ —Å–ª–µ–≥–∫–∞ –ø–æ–¥–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–π —ç—Ç–æ`;

    await Bot.sendMessage(req.user, BasicKeyboard, response);
    return;
  }

  const response = `–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:
  (–í —Å–ª—É—á–∞–µ –ß–ü –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—ã –æ—Å—Ç–∞–≤–ª—è—é—Ç –∑–∞ —Å–æ–±–æ–π –ø—Ä–∞–≤–æ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏ —Å –µ–≥–æ –ø–æ–º–æ—â—å—é)`;
  
  await Bot.sendMessage(req.user, BasicKeyboard, response);
  await Bot.changeState(req.user, 'NEW_TEAM/PHONE', {name: req.message})
}

export async function handleNewTeamPhone(req: BotRequest) {
  if (req.message === '–ö –Ω–∞—á–∞–ª—É') {
    await Bot.forward('INITIAL', req);
    return;
  }

  if (!PhoneRegex.test(req.message)) {
    const response = `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. 
    –ù–∞–ø—Ä–∏–º–µ—Ä, +7 (012) 345-67-89`;
    await Bot.sendMessage(req.user, BasicKeyboard, response)
    return;
  }

  const response = '–•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã –ø—Ä–∏–Ω—è—Ç—å –æ–¥–∏–Ω–æ–∫–∏—Ö –ø—É—Ç–Ω–∏–∫–æ–≤ –≤ —Å–≤–æ—é –∫–æ–º–∞–Ω–¥—É, –µ—Å–ª–∏ –≤ –Ω–µ–π –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –º–µ—Å—Ç–æ?';
  await Bot.sendMessage(req.user, ConfirmationKeyboard, response)

  await Prisma.user.update({
    where: {
      vkId: req.user.vkId,
    },
    data: {
      phone: req.message,
      botState: 'NEW_TEAM/LEGIONARIES',
    },
  });
}

// TODO: replace
const HardcodedDates = [
  new Date(2022, 10, 2),
  new Date(2022, 10, 9),
]

export async function handleNewTeamLegionaries(req: BotRequest) {
  if (req.message === '–ö –Ω–∞—á–∞–ª—É') {
    await Bot.forward('INITIAL', req);
    return;
  }

  let withLegionaries;
  switch (req.message) {
  case '–î–∞':
    withLegionaries = true;
    break;
  case '–ù–µ—Ç':
    withLegionaries = false;
    break;
  default:
    await Bot.sendMessage(req.user, ConfirmationKeyboard, '–í—ã–±–æ—Ä –ø—Ä–æ—Å—Ç: –î–∞ –∏–ª–∏ –ù–µ—Ç')
    return;
  }

  const response = `
  ${withLegionaries
    ? '–í—ã —Å–æ–≥–ª–∞—Å–∏–ª–∏—Å—å –ø—Ä–∏–Ω–∏–º–∞—Ç—å –≤ —Å–≤–æ–∏ —Ä—è–¥—ã –ª–µ–≥–∏–æ–Ω–µ—Ä–æ–≤!'
    : '–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –ø—Ä–∏–Ω–∏–º–∞—Ç—å –≤ —Å–≤–æ–∏ —Ä—è–¥—ã –ª–µ–≥–∏–æ–Ω–µ—Ä–æ–≤ üòî'}
–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É, –≤ –∫–æ—Ç–æ—Ä—É—é –≥–æ—Ç–æ–≤—ã –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ:`;

  const teamsByDays = await Prisma.team.groupBy({
    by: ['participationDate'],
    _count: true,
  })

  //TODO: –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –¥–Ω–µ–π

  const occupiedDays = teamsByDays.filter(d=>d._count >= 32).map(d=>d.participationDate)
  const freeDays = HardcodedDates.filter((d) => !occupiedDays.includes(d))

  await Bot.sendMessage(req.user, NewTeamDateKeyboard(freeDays), response, )
  await Bot.changeState(req.user, 'NEW_TEAM/DATE', {
    name: (req.user.botData as any).name,
    withLegionaries,
  })
}


export async function handleNewTeamDate(req: BotRequest) {
  if (req.message === '–ö –Ω–∞—á–∞–ª—É') {
    await Bot.forward('INITIAL', req);
    return;
  }

  const dateString = req.message;
  let date;
  switch (req.message) {
  case '02 –æ–∫—Ç—è–±—Ä—è':
    date = new Date(2022, 10, 2);
    break;
  case '09 –æ–∫—Ç—è–±—Ä—è':
    date = new Date(2022, 10, 9);
    break;
  default:
    await Bot.sendMessage(req.user, NewTeamDateKeyboard(HardcodedDates),
      '–í—ã–±–æ—Ä –ø—Ä–æ—Å—Ç: "02 –æ–∫—Ç—è–±—Ä—è" –∏–ª–∏ "09 –æ–∫—Ç—è–±—Ä—è"')
    return;
  }

  const teamsByDays = await Prisma.team.groupBy({
    by: ['participationDate'],
    _count: true,
  })
  
  console.log(teamsByDays)

  if(teamsByDays.length > 0 && teamsByDays.find(td=>td.participationDate===date)._count >= 32) {
    const occupiedDays = teamsByDays.filter(d=>d._count >= 32).map(d=>d.participationDate)
    const freeDays = HardcodedDates.filter((d) => !occupiedDays.includes(d))
    await Bot.sendMessage(req.user, NewTeamDateKeyboard(freeDays),
      '–ò–∑–≤–∏–Ω–∏, –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å —É—á–∞—Å—Ç–≤—É–µ—Ç —É–∂–µ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∫–æ–º–∞–Ω–¥, –ø–æ–ø—Ä–æ–±—É–π –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π')
    return;
  }

  const { name, withLegionaries } = req.user.botData as any;

  const team = await Prisma.team.create({
    data: {
      id: slug(name),
      name,
      legionariesAllowed: withLegionaries,
      participationDate: date,
      code: makeid(TeamCodeLength),
    },
  });
  
  await Prisma.user.update({
    where: {
      vkId: req.user.vkId,
    },
    data: {
      teamID: team.id,
      role: 'CAPTAIN',
      botState: 'INITIAL',
      botData: {},
    },
  });

  const response =`
  –¢–≤–æ—è –∫–æ–º–∞–Ω–¥–∞ "${team.name}" –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞! 
  –í—ã –±—É–¥–µ—Ç–µ –ø—Ä–∏–Ω–∏–º–∞—Ç—å —É—á–∞—Å—Ç–∏–µ ${dateString}.
  –û—Ç–ø—Ä–∞–≤—å —ç—Ç–æ—Ç –∫–æ–¥ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —Å–≤–æ–µ–π –∫–æ–º–∞–Ω–¥—ã, —á—Ç–æ–±—ã –æ–Ω–∏ –º–æ–≥–ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è: 
  ${team.code}
  
  ${withLegionaries
    ? '–ö—Ä–æ–º–µ —Ç–æ–≥–æ —Ç—ã —Ä–∞–∑—Ä–µ—à–∏–ª –æ–¥–∏–Ω–æ–∫–∏–º –∏–≥—Ä–æ–∫–∞–º –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è—Ç—å—Å—è –∫ —Ç–≤–æ–µ–π –∫–æ–º–∞–Ω–¥–µ! –ñ–¥–∏ –Ω–æ–≤—ã—Ö –¥—Ä—É–∑–µ–π!\n'
    : ''
}
  –ò—â–∏ —Å–ø–∏—Å–∫–∏ —Å–≤–æ–µ–π –∫–æ–º–∞–Ω–¥—ã –Ω–∞ —Å–∞–π—Ç–µ - https://ppp.itmo.online`;

  await Bot.sendMessage(req.user, UserWithTeamInitialKeyboard, response);
}